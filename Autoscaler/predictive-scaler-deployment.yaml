apiVersion: apps/v1
kind: Deployment
metadata:
  name: predictive-scaler
  namespace: default # Ensure namespace matches RBAC
spec:
  replicas: 1 # Usually only need one predictor instance
  # Ensure only one pod during rollout to avoid duplicate metrics
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 1
  selector:
    matchLabels:
      app: predictive-scaler
  template:
    metadata:
      labels:
        app: predictive-scaler
    spec:
      terminationGracePeriodSeconds: 30
      serviceAccountName: predictive-scaler-sa # <-- ADD THIS LINE
      containers:
      - name: predictive-scaler
        # Make sure image includes the kubernetes client library!
        image: 4dri41/predictive-scaler:latest # Use your actual image
        imagePullPolicy: Always
        ports:
        - name: http
          containerPort: 5000
        env:
        # Force single Gunicorn worker to keep Prometheus client single-process
        - name: GUNICORN_WORKERS
          value: "1"
        - name: APP_NAME
          value: "predictive-scaler"
        # NEW: Env vars to configure the target for metrics collection
        - name: TARGET_NAMESPACE
          value: "default" # Namespace of product-app-combined
        - name: TARGET_DEPLOYMENT
          value: "product-app-combined" # Deployment to get metrics from
        - name: TARGET_APP_LABEL
          value: "product-app-combined" # Label used by product-app-combined pods
        - name: PROMETHEUS_URL
          value: "http://prometheus-operated.monitoring.svc.cluster.local:9090"
        resources: # Add appropriate resources for the scaler
          requests:
            cpu: "100m"
            memory: "512Mi"
          limits:
            cpu: "500m"
            memory: "1Gi"
        readinessProbe: # Add probes
          httpGet:
            path: /health
            port: 5000
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 3
          failureThreshold: 6
        livenessProbe:
          httpGet:
            path: /health
            port: 5000
          initialDelaySeconds: 20
          periodSeconds: 20
          timeoutSeconds: 3
          failureThreshold: 6
        lifecycle:
          preStop:
            exec:
              command: ["/bin/sh", "-c", "sleep 5"]
        volumeMounts:
        - name: data-storage
          mountPath: /data
      volumes:
      - name: data-storage
        persistentVolumeClaim:
          claimName: predictive-scaler-pvc